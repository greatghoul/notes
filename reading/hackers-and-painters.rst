.. _hackers_and_painters:

黑客与画家
======================

序言
---------

hack 作为名词有两个意思，既可以指很巧妙或很便捷的解决方法，也可以指比较笨拙、不那么优雅的解决方法。
两者都能称为 hack，不同的是，前者是漂亮的解决方法（cool hack 或 neat hack），后者是丑陋的解决方法
（ugly hack 或 quick hack）。
 
“黑客”这个词不仅是第一流能力的象征，还包含着求解问题过程中产生的 **精神愉悦和享受** 。

出于 **兴趣** 而解决某个难题， **不管它有没有用** ，这就是黑客。

三个特点：好玩、高智商、探索精神。不是实用性或金钱。

.. note::

    出于兴趣而不是实用性或者金钱而解决哪个难题就称为黑客，当然了，这个没有限定一定是计算机相关的，黑客并非计算机
    行业专有的称谓了。

黑客价值观的核心原则：分享、开放、民主、计算机的自由使用、进步。

.. note::

    这个核心原则应用到计算机行业，完全就是开源主义嘛。印象中 `星际译王`_ 的作者 `胡正`_ 完全符合黑客的定义。
    不过他最近似乎有些开放过了头，开始创建什么 `佛党`_ 感觉有些过了火，真替他提忧。

.. _星际译王: http://www.stardict.cn/
.. _胡正: http://www.huzheng.org/
.. _佛党: http://www.fodang.org/

.. _chapter1:

第1章 为什么书呆子不受欢迎？
-------------------------------

为什么聪明的小孩一直不受同龄人的欢迎呢？我认为，答案就是 **他们真的不想让自己受欢迎** ，他们 **更想追求的是另
一件事 -- 聪明** ，他们 **想要做伟大的事** 。

.. note::

    很奇怪，书呆子不受欢迎这种事，在中国并不多见，可能中国的教育体制致使大家在高中的时候关心的大概都是同一件事
    -- 上大学。大家在某种意义上，都是书呆子，但大家都在追求聪明，却完全没有精力去 **做伟大的事** 。这是教育体制
    的悲哀，美国这种在高中学生中流行的 **书呆子** 不受欢迎的情景，在中国，似乎到了大学才开始。不部分人整天想要
    自己更受欢迎，而另一部分人（书呆子）却不断让自己更聪明，并且真正开始 **想做伟大的事** ，真正开始对未知的世界
    饥渴的索求。

任何一种艺术，不管是否重要，如果你想要在该领域出类拔萃，就必须全身心的投入。

真实世界的特点就是，它极其庞大。如果总体足够大，即使是人数最少的少数派，只要聚焦在一起，也能产生可观的力量。

我对许多美好的字眼都嗤之以鼻，比如“人格”、“正直”，因为成年人贬低了这些词。在他们嘴里，这些词似乎都是一个意思
-- “听话”。一些孩子因为具备所谓的“人格”和“正直”，而受到夸奖，可是他们不是呆得像一头大笨牛，就是轻浮的像一个
动脑筋的吹牛者。如果“人格”和“正直”就是这种样子，我宁愿不要它们。

.. note::

    经常听到女友谈论她同学、老师或者朋友的孩子如果出众，有心机，聪明，能歌善舞，才能出众。但事实上我比较喜欢
    她姐姐的两个小孩，她们才真的像小孩，天真可爱，没有心机，会闹脾气，有时甚至不稳重，我觉得这才是小孩子纯天
    然的表现，那种看上去很老成的小孩子，无论是直接还是建议，都是父母意志强制培养的结果，这种孩子，虽然经常得到
    别人的夸奖，但其实是悲惨的，因为他们失去了孩子最宝贵的东西 -- 天真。

任何对生活立竿见影的改变，可能还是来自于书呆子自己。

我们认定无法解决的问题，事实上完全可以解决。

.. _chapter2:

第2章 黑客与画家
------------------

黑客与画家的共同之处，在于他们都是创作者。

只是单纯地决定去如何实现某种规格，那肯定还是黑客。黑客的最高境界是创造某种规格。

你把整个程序想清楚的时间点，应该是在编写代码的同时，而不是在编写代码之前。

.. note::

    这一点与大学中我们所学到的方法完全相悖，虽然觉得不可思议，但又觉得有些
    道理，我们在动手编程之前，所能想到的大多只是大的架子，面细节的东西，通
    常是在具体编码时才确定下来。

我们面试程序员的时候，主要关注的事情就是业余时间他们写了什么软件。因为如果你不爱
一件事，你不可能反它做得真正优秀，要是你热爱编程，你就不可避免地会开发你自己的项目。

.. note::

    我自认是热爱编程的，从小就被编程所迷，一直为它投入着自己的大部分的业余时间，
    甚至我投入在编程上的时间，比投入在女朋友上的时间都要多，这份热情从未减弱，甚至
    因为我所拥有的技能起来越多，越来越成熟，这种热情更新高涨。

绘画的这个创作过程就值得学习。我认为黑客也应该这样工作。偿不能盼望先有一个完美的规格设计，
然后再动手编程，这样想是不现实的。如果你预告承认规格设计是不完美的，在编程的时候，你可以
根据需要当场修改规格，最终会有一个更好的结果。

过早的优化和过早的设计都是危险的事情。

坚持一丝不苟，就能取得优秀的成果，因为那些看不见的细节累积起来，就变得可见了。

黑客是一个创作者，他从事的就不是机械性的工作，他必须具备灵感。

对于画家和黑客这样的创作者，有些工作需要投入巨大的热情，另一些工作则是不需要很操心的日常
琐事。在你厌倦的时候去做那些比较容易做的工作，这是个不错的主意。

.. note::

    这是我比较喜欢的工作方式，我喜欢解决难题，但脑子又时常有回不过弯的时候，这种时候一般
    都会去解决一些比较容易解决的问题。感觉 git ，我随时可以切换到不同的工作场景。

如果一个代码块由三四个人共同开发，就没有人真正“拥有”这块代码。最终，它就会变得像一个公共
杂物间，没人管理，又脏又乱，到处堆满了冗余代码。正确的合作方法是将项目分割成严格定义的模
块，每一个模块由一个人明确负责。模块与模块之间的接口经过精心设计，如果可能的话，最好把说
明文档写得像编程语言那样清晰。

.. note::

    对于模块划分，是大家都喜欢干的事，因为多个人负责一个功能，即增加了沟通成本，又因为多人
    人编程习惯和能力的不同，会导致这部分代码很乱，而且还要经常处理文件冲突，非常麻烦。但结
    对编程似乎又是一个特例，两个人共同开发一个模块，这样代码应该是由两个人共同拥有，对结对
    并不了解，不知道具体应该怎么理解了。

从他人的角度思考问题正是成功的奥秘所在。普通黑客和优秀黑客的所有区别之中，会不会“换位思考”
可能是最重要的单个因素。

.. note::
    
    换位思考其实是一件非常不容易的事情，如果你对“别人”不了解，你根本无法理解他们到底是怎么
    想的，又何谈换位思考。我也曾经尝过过 **站在别人的立场上看问题** 但最后不知不觉间又回到
    了自己的立场，但是还是自以为那是别人的立场。

程序是写出来给人看的，附带能在机器上运行。


.. _chapter3:

第3章 不能说的话
---------------------

你一定要小心自己说的话，自以为无害的话会给你惹来大麻烦。


找出哪些话不能说：

 1. 周围的人因为说也什么而陷入麻烦，并判断这些言论的真伪
 2. 关注异端邪说，判断被贴上标签的言论是否切合
 3. 比较当代观念和古代观念，比较不同文件之间的观念
 4. 寻找那些一本正经的卫道者所捍卫的东西，将真实的世界与它们捍卫的东西做比较
 5. 观察禁忌是如何产生的，观察思想斗争过程中稍强一派所极力压制的观念

流行的道德观念往往不是偶然产生的，而是被刻意创造出来的。如果有些观点我们无法说出口，原因很可能是
某些团体不允许我们说出口。

为了在全社会制造出一个禁忌，负责实施的团队必定既不是特别强大也不是特别弱小。如果一个团体强大到无比
自信，它根本不会在乎别人的抨击。但是，如果一个团体太弱小，就会无力推行禁忌。

.. note:: 比如在解放初期，如果你说党不好，那绝对会成为全民公敌，甚至被迫害致死，而在现代这个社会
          基本上大家都在说它不好，但是它也不怎么在乎，但它仍然会去刻意创造出一些观念，虽然这些观
          并没有很好的被接受。

不管实际上是否有思想斗争，斗争总是会以思想斗争的形式表现出来。

流行的东西的传播途径：

 1. 第一批的接受者：抱负心，精英意识，想与普通人区分开来
 2. 第二批的接受者：很快加入进来，恐惧心，他们接受流行，不是因为想要与众不同，而是因为害怕与众不同。

带动流行的两种力量中，恐惧心比抱负心有力得多。

.. note:: 这个过程很有意思，起初一小部分人想要与众不同，于是尝试一些新的事物，当规模逐渐扩大，大多数
          人会加入进来，成为一种流行，当规模继续增大，最初的那部分人便失去了他们 **与众不同** 的优势，
          进而就会去尝试别的事物，于是新的流行就出来了，这个过程不断进行，生生不息。

有意义的不能说的话：

 * 这些话不能说出口
 * 这些话是正确的，或者看上去正确，值得进一步讨论

最先从你头脑中跳出来的想法，往往是最困扰你、很可能为真的想法。你已经注意到他们，但还没有认真思考过。

想要摆脱你自己时代的流行，不要让自己成为人群的一分子，要尽可能的远离人群，观察正在发生的事情，特别注意
那些被压制的思想观点。不权要远距离观察人群，更要远距离观察自己。


.. _chapter4:

第4章 良好的坏习惯
---------------------

丑陋的做法与聪明的做法存在一个共同点，那就是都不符合常规。

黑客是不服从管教的，这往往会激怒当局。但是，不服从管教，其实是黑客之所以成为优秀程序员的原因之一。

.. note:: 服务管教往往会限制人的思想，无论是主要的吸收还是强制的灌输，都会对个人的主观意识造成大大小小的
          的冲击，会让人逐渐失去自我，会有意无意的迎合上意，而不是独立思考并进行创造。这样的人，怎么可能
          指望成为优秀的程序员。

如果我们不可以研究当前的技术，不能思考如何改进它，那么我们怎样才能开发出新技术呢？

黑客都是聪明人，很少出现所有人意见一致的情况。如果他们都说没有问题，那么也许真的是什么地方出了问题。

.. note:: 这个观点非常有趣，优秀的开源项目的开发社区中经常会看到争论，

一个人们拥有言论自由和行动自由的社会，往往最有可能采纳最优方案，而不是采纳最有权势的人提出的方案。
专制国家会变成腐败国家，贫穷国家会变成弱小国家。


.. _chapter5:

第5章 另一条路
-----------------

什么是另一条路？ -- 把软件从桌面搬到服务器端运行，浏览器作为用户界面。

如果软件运行在服务器上，一切都会简单的多，无论是对用户，还是对我们。

终端设备不应该存储数据，它们应该像电话那样。事实上，终端设备最后可能会变成变化，或者反过来，电话变成终端设备。

.. note:: 作者真是有预见性，在写书时就已经看到了这样的趋势。

互联网软件没有安装的过程，因此没有操作系统的兼容性问题，既然不用安装，那购买之前试用就变得非常普遍，非常容易。

互联网软件遇到的新问题：开发者必须正确的设计软件，使得它能够平滑升级，不让使用者感到困惑。

互联网软件的优势：

 * 不需要安装，因此没有操作系统的兼容性
 * 用户在购买前可以非常方便的试用软件
 * 能同时被多人使用，非常适合团队协作性的工作
 * 软件可以在后台平滑升级，用户甚至都感觉不到软件在升级
 * 数据会更安全，软件的系统管理员会备份数据，并格外注意数据安全
 * 互联网软件不太容易感染病毒
 * 对于用户来说，使用互联网软件不会有太大的压力
 * 所有用户都使用的同一版本，bug 一发现就会立刻得到纠正
 * 可以使用多种语言开发
 * 方便安装硬件和软件以增加新功能
 * 软件的发布过程可以被分解为一系列的渐进式的修改，而不是猛的推出一个大幅发动的版本
 * 因为大部分变化都是细微和渐进的，所以引入 bug 的机会会比较小
 * 没有版本的概念
 * 因为数据在你的硬盘上，因此你能够再现大部分的 bug

互联网软件的劣势：

 * 数据的传输会有一定的延迟，因为不适合数据密集型的应用，比较 Photoshop
 * 互联网软件随时随地都在你的服务器上运行，一个严重 bug 可能影响的不是一个用户，而是所有用户

解决新代码的 bug 要比解决历史遗留代码的 bug 容易。在自己刚刚写好的代码中，找出 bug 往往会比较快。有时，你只要看到
出错提示就知道问题出在哪里，甚至都不用看源码，因此潜意识中你已经在担心那个地方可能会出错。如果你要解决6个月前写的
代码的 bug 那么就麻烦了，就要大费周章了。那时，你对代码也已经不熟悉了，就更可能采用危险的方式解决问题，甚至引入更
多的 bug。

早一点发现 bug 就不容易形成复合 bug，也就是互相影响的两个 bug。

能够即时的发布软件，对开发者是一个激励。

构思这种东西有一个特点，那就是它会导致更多的构思。将一个构思束之高阁，不仅意味着延迟它的实现，还意味着延迟所有在实现
过程中激发的构思，甚至会限制新构思的产生。

.. note:: 我就有这样的感受，在最初开发 ScriptFan 网站时，我有很多想法，但因应某些想法比较大，而我又没有把它们分拆成
          一些小的想法来立即动手实现，因为被搁置起来，以致今天我都无法想起当时的具体细节，甚至一些地方我还需要再想
          一次，这不仅是一种时间的浪费，甚至有一部想法，我死活想不起来了。因为最近在重拾开发进程时，我有想法就立即动手
          ，这样不但开发进程得到推进，也从中获益不浅。

提高软件可靠性的关键在于开发时 **全神贯注** ，而不是降价开发速度。

----

软件项目是交互关系复杂的工作，需要大量的沟通成本，人力的增加会使沟通成本急剧上升，反而无法达到缩短工期的目的。从本质上
，软件项目的人力与工期是无法互换的，当项目进度落后时，光靠增加人力到该项目中，并不会加快速度，反而有可能使进度更加延后。

关注用户不仅有助于优化程序，还有助于指导你的设计。

互联网软件的目标客户是个人和小企业，因为这些客户决策灵活，更容易去尝试新的东西。互联网软件往往也是大公司的最佳选择，
虽然它们反应比较迟钝，不一定能意识到这一点。

互联网软件的服务更安全，因为它们会雇用到更有能力的安全专家，而这一点，客户自己很验证做到，那种部署到自己服务器上的
软件更容易遭到入侵。

有钱的客户倾向于购买更贵的软件，即使便宜的更符合他们的选择。原因是，那些索要高价的人将更多的钱投入推销。

对于互联网软件，最好的做法就是把个人和小企业客户放在第一位，其它的客户该来的时候就会来。

----

如果你是一个黑客，并且梦想着自己创业，可能会有两件事情令你望而却步，不敢真正开始采取行动。一件是你不懂得管理企业，另
一件是你害怕竞争。可能实际上，这两件事朝阳 没有通电的篱笆。

管理企业很简单：

 * 做出用户喜欢的产品
   * 从制造简洁的产品开始着手，首先要保证你自己愿意用
   * 然后迅速做出1.0版，并且根据用户的反馈，不断改进
   * 用户总是对的，但不同的用户要求不同，需要正确的设置默认值，而不是限制用户选择
 * 保证开支小于收入
   * 制作互联网软件非常便宜
   * 初期资金缺乏可以养成勤俭节约的好习惯

害怕竞争？相反，那些传统软件公司也许会害怕你。



.. _chapter17:

第17章 拒绝平庸
------------------

既然你可以使用任何语言，你就不得不思考到底使用哪一种语言。

Lisp 语言的好处不在于它有一些狂热爱好者才明白的优点，而只在于它是目前最强大的编程语言。
它没有得到广泛使用的原因就是因为编程语言不仅仅是技术，也是一种思维习惯，非常难于改变。

.. note:: 

    没有接触过 List 语言，对于它的优点也不了解，所以也无法置评，不过倒是非常有兴趣了解
    这个被作者如此赞扬的语言，或者说去探索一种新的思维方式。

对于应用程序来说，还是应该选择总体最强大、效率也在可接受范围内的编程语言，否则都不是
正确的选择。

到了一定年龄后，程序员极少更换自己的编程语言。不过习惯使用的是哪一种语言，他们往往认为    
这种语言已经足够好了。

.. note::

    我的认知是：这是事实，人的经历毕竟是有限的，如果一种事物对自己来说已经足够好了，为什么还要换呢。
    知足才能常乐，总不能别人总说他媳妇好，你就非得去娶他媳妇吧。
    
    时间长了，你已经懂一门语言的脾性，费时费力去折腾另一个语言也不太明智。不过这有一个
    前提，就是你对该语言已经相当熟悉，如果你还没有精深到那种程度，了解些更美好的东西也
    不为过。

他们都满足于自己碰巧用熟了的语言，他们的编程思想都被那种语言同化了。

编程语言特点之一就是它会使得大多数使用它的人满足于现状，不想改用其它语言。
人类天性变化的速度大大慢于计算机硬件变化的速度，所以编程语言的发展通常比
CPU 的发展落后一二十年。

.. note::

    可能使用 Python 时间长了，思维就被 Python 模式化了，所以当我接触到 Ruby 时，我惊奇的
    发现竟然还可以这样编程，很神奇。然后我立即去使用它，但可能是工作需要的原因，并非完全
    出版兴趣，对 Ruby 的粘性还不大。不过经过对这个神奇的编程语言的学习，我将一些非常不错
    的编程思想运用到了 Python 甚至 Javascript 和 Java 的开发中，效率一样的好。相对于语言
    本身， **思想才是一种更强大的武器** 。
    

技术的变化速度通常是非常快的。但是，编程语言不一样，与其说它是技术，还不如说它是程序员的
思考模式。编程语言是技术和宗教的混合物。

.. note:: 这一点在论坛中讨论编程语言的优劣时尤其明显，编程器又何尝不是呢？

评估竞争对手的妙招 -- 关注他们的招聘职位。

.. note:: 同样，想要了解一个公司是否值得自己去投效，也可以关注它的招聘职位。

